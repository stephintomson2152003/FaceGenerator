test_info = [
    [[0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0], [0, 0, 255], [0, 0, 255]],
    [[255, 0, 0], [0, 255, 0], [0, 0, 255], [0, 255, 0], [0, 255, 0], [255, 0, 0], [0, 0, 255], [0, 255, 0], [0, 255, 0], [0, 0, 255], [0, 0, 255], [0, 255, 0]],
    [[0, 0, 255], [255, 0, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0]],
    [[255, 0, 0], [0, 255, 0], [0, 0, 255], [0, 0, 255], [0, 0, 255], [255, 0, 0], [255, 0, 0], [0, 255, 0], [255, 0, 0], [0, 255, 0], [255, 0, 0], [0, 255, 0]],
    [[255, 0, 0], [0, 0, 255], [0, 0, 255], [0, 255, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [0, 0, 255], [255, 0, 0], [0, 0, 255], [0, 0, 255], [255, 0, 0]],
    [[0, 0, 255], [0, 0, 255], [255, 0, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 0, 0], [0, 0, 255], [0, 255, 0]],
    [[255, 0, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [0, 0, 255], [255, 0, 0], [0, 255, 0], [0, 255, 0], [0, 0, 255], [255, 0, 0], [0, 255, 0], [255, 0, 0]],
    [[0, 0, 255], [0, 255, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 0, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 0, 0], [0, 0, 255], [0, 0, 255]],
    [[0, 0, 255], [0, 255, 0], [0, 0, 255], [0, 0, 255], [0, 0, 255], [0, 255, 0], [255, 0, 0], [0, 0, 255], [255, 0, 0], [0, 0, 255], [255, 0, 0], [255, 0, 0]],
    [[0, 0, 255], [0, 255, 0], [0, 255, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [255, 0, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0]],
    [[0, 255, 0], [0, 0, 255], [0, 0, 255], [0, 255, 0], [255, 0, 0], [0, 0, 255], [255, 0, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [0, 0, 255], [0, 0, 255]],
    [[0, 255, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [255, 0, 0], [0, 0, 255], [0, 255, 0], [255, 0, 0]]
]

def check1(test_info, n):
    rows = len(test_info)
    cols = len(test_info[0])
    information = [[None for _ in range(cols)] for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            red = 0
            green = 0
            blue = 0
            count = 0
            
            for m in range(-n, n + 1):
                for o in range(-n, n + 1):
                    ni, nj = i + m, j + o
                    # Ensure we're within bounds
                    if 0 <= ni < rows and 0 <= nj < cols:
                        red += test_info[ni][nj][0]
                        green += test_info[ni][nj][1]
                        blue += test_info[ni][nj][2]
                        count += 1
            
            if count > 0:
                # Calculate averages
                red_avg = red / count
                green_avg = green / count
                blue_avg = blue / count
                
                # Normalize to percentage of 255
                red_pct = (red_avg / 256) * 100
                green_pct = (green_avg / 256) * 100
                blue_pct = (blue_avg / 256) * 100                
                # Store formatted string
                information[i][j] = f"{red_pct:.0f} {green_pct:.0f} {blue_pct:.0f} "
            else:
                information[i][j] = "000 000 000"  # Fallback case
    
    return information

# Example usage
result = check1(test_info,0)
for row in result:
    print(row)
